// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_DIRECT")
}

// ============================================
// Core Models
// ============================================

enum Role {
  OWNER
  STAFF
  CLIENT
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(CLIENT)
  salonId   String?
  salon     Salon?   @relation(fields: [salonId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  staffAppointments  Appointment[] @relation("StaffAppointments")
  blockedTimes       BlockedTime[]

  @@index([salonId])
  @@index([email])
}

model Salon {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  email     String?
  phone     String?
  address   String?
  settings  Json?    @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users             User[]
  clients           Client[]
  services          Service[]
  appointments      Appointment[]
  giftCertificates  GiftCertificate[]
  membershipTiers   MembershipTier[]
  memberships       Membership[]

  @@index([slug])
}

model Client {
  id                      String   @id @default(cuid())
  salonId                 String
  salon                   Salon    @relation(fields: [salonId], references: [id], onDelete: Cascade)
  name                    String
  email                   String?
  phone                   String?
  notes                   String?  @db.Text
  emailNotificationsEnabled Boolean @default(true)
  smsNotificationsEnabled   Boolean @default(true)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  // Relations
  appointments      Appointment[]
  giftCertificates  GiftCertificate[]
  memberships       Membership[]

  @@index([salonId])
  @@index([email])
  @@index([phone])
  @@index([salonId, email])
}

model Service {
  id          String   @id @default(cuid())
  salonId     String
  salon       Salon    @relation(fields: [salonId], references: [id], onDelete: Cascade)
  name        String
  description String?  @db.Text
  duration    Int      // in minutes
  price       Decimal  @db.Decimal(10, 2)
  staffIds    String[] @default([])
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  appointments Appointment[]

  @@index([salonId])
  @@index([salonId, isActive])
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  NO_SHOW
}

model Appointment {
  id        String            @id @default(cuid())
  salonId   String
  salon     Salon             @relation(fields: [salonId], references: [id], onDelete: Cascade)
  clientId  String
  client    Client            @relation(fields: [clientId], references: [id], onDelete: Cascade)
  staffId   String
  staff     User              @relation("StaffAppointments", fields: [staffId], references: [id])
  serviceId String
  service   Service           @relation(fields: [serviceId], references: [id])
  datetime  DateTime
  status    AppointmentStatus @default(SCHEDULED)
  notes     String?           @db.Text
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  // Relations
  payment Payment?

  @@index([datetime])
  @@index([staffId, datetime])
  @@index([clientId])
  @@index([salonId])
  @@index([salonId, datetime])
}

// ============================================
// Payment Models
// ============================================

enum PaymentMethod {
  CREDIT_CARD
  GIFT_CERTIFICATE
  CASH
  OTHER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model Payment {
  id                String        @id @default(cuid())
  appointmentId     String        @unique
  appointment       Appointment   @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  amount            Decimal       @db.Decimal(10, 2)
  method            PaymentMethod
  status            PaymentStatus @default(PENDING)
  stripePaymentId   String?       @unique
  metadata          Json?         @default("{}")
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relations
  auditLogs PaymentAuditLog[]

  @@index([stripePaymentId])
  @@index([status])
  @@index([createdAt])
}

model PaymentAuditLog {
  id        String   @id @default(cuid())
  paymentId String
  payment   Payment  @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  action    String   // e.g., "source_selected", "payment_attempted", "payment_succeeded", "payment_failed", "refund_initiated"
  details   Json     // Stores all relevant context
  createdAt DateTime @default(now())

  @@index([paymentId])
  @@index([createdAt])
  @@index([action])
}

model GiftCertificate {
  id             String   @id @default(cuid())
  code           String   @unique
  salonId        String
  salon          Salon    @relation(fields: [salonId], references: [id], onDelete: Cascade)
  clientId       String?
  client         Client?  @relation(fields: [clientId], references: [id], onDelete: SetNull)
  balance        Decimal  @db.Decimal(10, 2)
  originalAmount Decimal  @db.Decimal(10, 2)
  expiresAt      DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([code])
  @@index([salonId])
  @@index([clientId])
}

// ============================================
// Membership Models
// ============================================

enum MembershipStatus {
  ACTIVE
  CANCELLED
  EXPIRED
}

model MembershipTier {
  id        String   @id @default(cuid())
  salonId   String
  salon     Salon    @relation(fields: [salonId], references: [id], onDelete: Cascade)
  name      String
  price     Decimal  @db.Decimal(10, 2)
  benefits  Json     @default("{}")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  memberships Membership[]

  @@index([salonId])
  @@index([salonId, isActive])
}

model Membership {
  id                   String           @id @default(cuid())
  clientId             String
  client               Client           @relation(fields: [clientId], references: [id], onDelete: Cascade)
  salonId              String
  salon                Salon            @relation(fields: [salonId], references: [id], onDelete: Cascade)
  tierId               String
  tier                 MembershipTier   @relation(fields: [tierId], references: [id])
  status               MembershipStatus @default(ACTIVE)
  startDate            DateTime
  endDate              DateTime?
  stripeSubscriptionId String?          @unique
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt

  @@index([clientId])
  @@index([salonId])
  @@index([status])
  @@index([stripeSubscriptionId])
}

// ============================================
// Availability Models
// ============================================

model BlockedTime {
  id        String   @id @default(cuid())
  staffId   String
  staff     User     @relation(fields: [staffId], references: [id], onDelete: Cascade)
  startTime DateTime
  endTime   DateTime
  reason    String?
  recurring Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([staffId])
  @@index([startTime, endTime])
  @@index([staffId, startTime, endTime])
}

// ============================================
// Notification Models
// ============================================

enum NotificationType {
  APPOINTMENT_CONFIRMATION
  APPOINTMENT_REMINDER
  APPOINTMENT_CANCELLED
  APPOINTMENT_RESCHEDULED
  PAYMENT_RECEIPT
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
  CANCELLED
}

model Notification {
  id          String             @id @default(cuid())
  type        NotificationType
  recipient   String             // Email or phone number
  status      NotificationStatus @default(PENDING)
  scheduledAt DateTime           // When to send the notification
  sentAt      DateTime?          // When it was actually sent
  metadata    Json?              @default("{}") // Additional context (appointmentId, etc.)
  error       String?            @db.Text // Error message if failed
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  @@index([status])
  @@index([scheduledAt])
  @@index([type])
  @@index([status, scheduledAt])
}
